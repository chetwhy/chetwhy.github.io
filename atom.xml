<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chet&#39;s blog</title>
  
  <subtitle>stay hungry stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chetwhy.github.io/"/>
  <updated>2019-04-20T18:28:38.998Z</updated>
  <id>http://chetwhy.github.io/</id>
  
  <author>
    <name>Chet Yuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文章标题</title>
    <link href="http://chetwhy.github.io/2019/04/20/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/"/>
    <id>http://chetwhy.github.io/2019/04/20/文章标题/</id>
    <published>2019-04-20T09:47:57.000Z</published>
    <updated>2019-04-20T18:28:38.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2><h3 id="你好-1"><a href="#你好-1" class="headerlink" title="你好"></a>你好</h3><h4 id="你好-2"><a href="#你好-2" class="headerlink" title="你好"></a>你好</h4><p><a href="https://blog.csdn.net/weixin_40141790" target="_blank" rel="noopener">csdn</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">    List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> authorities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h2&gt;&lt;h3 id=&quot;你好-1&quot;&gt;&lt;a href=&quot;#你好-1&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h3&gt;&lt;h
      
    
    </summary>
    
      <category term="Hexo" scheme="http://chetwhy.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://chetwhy.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://chetwhy.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot之全局异常处理</title>
    <link href="http://chetwhy.github.io/2019/04/20/SpringBoot%E4%B9%8B%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://chetwhy.github.io/2019/04/20/SpringBoot之全局异常处理/</id>
    <published>2019-04-20T09:47:57.000Z</published>
    <updated>2019-04-21T13:49:58.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常处理问题分析"><a href="#异常处理问题分析" class="headerlink" title="异常处理问题分析"></a>异常处理问题分析</h2><h3 id="异常如何处理"><a href="#异常如何处理" class="headerlink" title="异常如何处理"></a>异常如何处理</h3><h4 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h4><p>针对代码中的异常，常规有两种处理方式，一种throws直接抛出，另一种try..catch捕获。</p><p>在java项目中，有可能存在人为逻辑的异常，也可能为取得异常的详情，或是保证程序在异常时继续向下执行，会采用第二种处理方式。</p><p>但是，代码中每一处异常都来捕获，会使代码什么冗余且不利于维护。</p><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>定义一个全局异常处理类，返回统一规范的异常信息；</p><p>处理逻辑是，先判定是否会出现异常，再执行后续具体的业务。</p><h4 id="业务举例"><a href="#业务举例" class="headerlink" title="业务举例"></a>业务举例</h4><p>本文主要为了实现全局异常处理的逻辑，只举简单业务</p><p>某公司部门需增加员工，处理流程：1先根据员工编号查询员工对象，2判断员工对象是否有信息，即是否不为空，3若有信息，则说明已存在，无需再添加，若不是，则直接添加。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入dao层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeecMapper employeeecMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee 员工对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据id查询员工对象</span></span><br><span class="line">        Employeeec emp = employeeecMapper.selectByPrimaryKey(employee.getId());</span><br><span class="line">        <span class="comment">// 判断是否已有该员工</span></span><br><span class="line">        <span class="keyword">if</span> (emp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 已有，抛出异常，异常信息为已有该员工</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"异常代码：1201，错误信息：该员工已存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有，插入该员工</span></span><br><span class="line">        <span class="keyword">return</span> employeeecMapper.insert(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h2><p>业务中存在运行时异常和业务逻辑异常，前者不运行时很难察觉，后者在遍及业务时就可以定义出来，因此异常分为不可预知异常和可知异常。流程如下：</p><ol><li>自定义全局异常类，使用<code>@ControllerAdvice</code>，控制器增强</li><li>自定义错误代码及错误信息，两种异常最终会采用统一的信息格式来表示，错误代码+错误信息。</li><li>对于可预知的异常由程序员在代码中主动抛出，由<code>SpringMVC</code>统一捕获。</li><li>不可预知异常通常是由于系统出现bug、或一些外界因素（如网络波动、服务器宕机等），异常类型为<code>RuntimeException</code>类型（运行时异常）。</li></ol><h3 id="可知异常"><a href="#可知异常" class="headerlink" title="可知异常"></a>可知异常</h3><p>定义异常信息类，变量为错误代码和错误信息，捕获自定义异常时，直接将该对象返回</p><h3 id="不可知异常"><a href="#不可知异常" class="headerlink" title="不可知异常"></a>不可知异常</h3><p>定义一个map，将常见的异常存入其中，并定义错误代码。对于其他不常见的异常，即map中没有的，同一一个异常对象返回即可。</p><h2 id="异常处理代码流程"><a href="#异常处理代码流程" class="headerlink" title="异常处理代码流程"></a>异常处理代码流程</h2><h3 id="可知异常-1"><a href="#可知异常-1" class="headerlink" title="可知异常"></a>可知异常</h3><p>1、定义打印异常信息与返回结果的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 操作是否成功</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">success</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作结果代码</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> SUCCESS = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS_CODE = <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、定义打印异常信息的枚举类和返回结果类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  CommonCode implements ResultCode &#123;</span><br><span class="line">    NO_PAGE(<span class="keyword">false</span>,<span class="number">404</span>,<span class="string">"没有信息"</span>),</span><br><span class="line">    FAIL(<span class="keyword">false</span>,<span class="number">500</span>,<span class="string">"操作失败！"</span>),</span><br><span class="line">    SUCCESS(<span class="keyword">true</span>,<span class="number">200</span>,<span class="string">"操作成功！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果信息</span></span><br><span class="line">    <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">long</span> code;</span><br><span class="line">    String message;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带参构造</span></span><br><span class="line">    CommonCode(<span class="keyword">boolean</span> success, <span class="keyword">long</span> code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span> <span class="keyword">implements</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> success = SUCCESS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> code = SUCCESS_CODE;</span><br><span class="line"></span><br><span class="line">    String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(ResultCode resultCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = resultCode.success();</span><br><span class="line">        <span class="keyword">this</span>.code = resultCode.code();</span><br><span class="line">        <span class="keyword">this</span>.message = resultCode.message();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、定义错误异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ResultCode resultCode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 带参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(ResultCode resultCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultCode <span class="title">getResultCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、定义异常抛出类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionCast</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cast</span><span class="params">(ResultCode resultCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(resultCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、定义异常捕获类，使用<code>ControllerAdvice</code>控制器增强的注解，并在捕获CustomException异常的方法上加<code>ExceptionHandler</code>注解，即可捕获该类的所有异常，返回json数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionCatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕获CustomException类异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> customException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果信息,json数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(CustomException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">customException</span><span class="params">(CustomException customException)</span></span>&#123;</span><br><span class="line">        ResultCode resultCode = customException.getResultCode();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(resultCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、在业务中抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeecMapper employeeecMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        Employeeec emp = employeeecMapper.selectByPrimaryKey(employee.getId());</span><br><span class="line">        <span class="keyword">if</span> (emp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ExceptionCast.cast(CommonCode.FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> employeeecMapper.insert(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不可知异常处理"><a href="#不可知异常处理" class="headerlink" title="不可知异常处理"></a>不可知异常处理</h3><p>1、类似可知异常，先添加错误代码，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNAUTHORISE(<span class="keyword">false</span>,<span class="number">510</span>,<span class="string">"没有权限"</span>),</span><br></pre></td></tr></table></figure><p>2、在异常捕获类中添加不可知异常的捕获方法。该方法中，定义一个只读的map存储异常类型的错误代码的映射，map中没有的元素，同一用错误代码999来定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNKNOWNERROR(<span class="keyword">false</span>,<span class="number">999</span>,<span class="string">"未知异常"</span>),</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionCatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义map，存贮常见错误信息。该类map不可修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ImmutableMap&lt;Class&lt;? extends Throwable&gt;,ResultCode&gt; EXCEPTIONS;</span><br><span class="line">    <span class="comment">// 构建ImmutableMap</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> ImmutableMap.Builder&lt;Class&lt;? extends Throwable&gt;,ResultCode&gt; builder = ImmutableMap.builder();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(CustomException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">customException</span><span class="params">(CustomException customException)</span></span>&#123;</span><br><span class="line">        ResultCode resultCode = customException.getResultCode();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(resultCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕获非自定义类异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">exception</span><span class="params">(Exception exception)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        LOGGER.error(<span class="string">"catch exception ==&gt; "</span>,exception.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (EXCEPTIONS == <span class="keyword">null</span>)&#123;</span><br><span class="line">            EXCEPTIONS = builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">        ResultCode resultCode = EXCEPTIONS.get(exception.getClass());</span><br><span class="line">        <span class="keyword">if</span> (resultCode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(resultCode);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(CommonCode.UNKNOWNERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        builder.put(HttpMessageNotReadableException.class, CommonCode.INVALID_PARAM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成~~</p><h3 id="不可知异常处理-1"><a href="#不可知异常处理-1" class="headerlink" title="不可知异常处理"></a>不可知异常处理</h3><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常处理问题分析&quot;&gt;&lt;a href=&quot;#异常处理问题分析&quot; class=&quot;headerlink&quot; title=&quot;异常处理问题分析&quot;&gt;&lt;/a&gt;异常处理问题分析&lt;/h2&gt;&lt;h3 id=&quot;异常如何处理&quot;&gt;&lt;a href=&quot;#异常如何处理&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Hexo" scheme="http://chetwhy.github.io/categories/Hexo/"/>
    
    
      <category term="异常" scheme="http://chetwhy.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="控制器增强" scheme="http://chetwhy.github.io/tags/%E6%8E%A7%E5%88%B6%E5%99%A8%E5%A2%9E%E5%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://chetwhy.github.io/2019/04/20/hello-world/"/>
    <id>http://chetwhy.github.io/2019/04/20/hello-world/</id>
    <published>2019-04-20T08:04:22.276Z</published>
    <updated>2019-04-20T08:04:22.276Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
